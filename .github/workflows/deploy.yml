name: Deploy AWS Serverless ETL Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  AWS_REGION: us-east-1
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.9'

jobs:
  # Job 1: Run tests and validate code
  test-and-validate:
    name: Test and Validate
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Cache Node.js dependencies
        uses: actions/cache@v3
        with:
          path: ui-application/frontend/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('ui-application/frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov flake8 black

      - name: Install Node.js dependencies
        run: |
          cd ui-application/frontend
          npm ci

      - name: Lint Python code
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Format check Python code
        run: |
          black --check .

      - name: Lint JavaScript/React code
        run: |
          cd ui-application/frontend
          npm run lint

      - name: Run Python tests
        run: |
          python -m pytest tests/ -v --cov=. --cov-report=xml

      - name: Run React tests
        run: |
          cd ui-application/frontend
          npm test -- --coverage --watchAll=false

      - name: Validate AWS CDK
        run: |
          cd infrastructure
          npm install -g aws-cdk
          cdk synth --no-staging

      - name: Set deployment environment
        id: set-env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
          else
            echo "environment=staging" >> $GITHUB_OUTPUT
          fi

  # Job 2: Build and package artifacts
  build:
    name: Build Artifacts
    runs-on: ubuntu-latest
    needs: test-and-validate
    if: github.event_name != 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache Node.js dependencies
        uses: actions/cache@v3
        with:
          path: ui-application/frontend/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('ui-application/frontend/package-lock.json') }}

      - name: Install and build React app
        run: |
          cd ui-application/frontend
          npm ci
          npm run build

      - name: Package Lambda functions
        run: |
          cd lambda-functions
          zip -r etl-orchestrator.zip etl_orchestrator.py
          zip -r reconciliation-engine.zip reconciliation_engine.py
          
          cd ../ui-application/backend
          pip install -r requirements.txt -t .
          zip -r api-backend.zip . -x "*.pyc" "__pycache__/*"

      - name: Package Glue jobs
        run: |
          cd glue-jobs
          zip -r advisory-performance-etl.zip advisory_performance_etl.py

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            ui-application/frontend/build/
            lambda-functions/*.zip
            ui-application/backend/*.zip
            glue-jobs/*.zip
          retention-days: 7

  # Job 3: Deploy infrastructure
  deploy-infrastructure:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: [test-and-validate, build]
    if: github.event_name != 'pull_request'
    environment: ${{ needs.test-and-validate.outputs.environment }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install CDK
        run: |
          npm install -g aws-cdk

      - name: Install Python dependencies
        run: |
          pip install -r requirements.txt

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          path: ./artifacts/

      - name: Deploy infrastructure with CDK
        run: |
          cd infrastructure
          export ENVIRONMENT=${{ needs.test-and-validate.outputs.environment }}
          cdk bootstrap --force
          cdk deploy --all --require-approval never \
            --context environment=$ENVIRONMENT \
            --outputs-file outputs.json

      - name: Upload CDK outputs
        uses: actions/upload-artifact@v3
        with:
          name: cdk-outputs-${{ needs.test-and-validate.outputs.environment }}
          path: infrastructure/outputs.json
          retention-days: 30

  # Job 4: Deploy Lambda functions
  deploy-lambda:
    name: Deploy Lambda Functions
    runs-on: ubuntu-latest
    needs: [test-and-validate, deploy-infrastructure]
    if: github.event_name != 'pull_request'
    environment: ${{ needs.test-and-validate.outputs.environment }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          path: ./artifacts/

      - name: Download CDK outputs
        uses: actions/download-artifact@v3
        with:
          name: cdk-outputs-${{ needs.test-and-validate.outputs.environment }}
          path: ./

      - name: Deploy ETL Orchestrator Lambda
        run: |
          FUNCTION_NAME=$(jq -r '.["AdvisoryETLStack"]["ETLOrchestratorFunctionName"]' outputs.json)
          aws lambda update-function-code \
            --function-name $FUNCTION_NAME \
            --zip-file fileb://artifacts/lambda-functions/etl-orchestrator.zip

      - name: Deploy Reconciliation Lambda
        run: |
          FUNCTION_NAME=$(jq -r '.["AdvisoryETLStack"]["ReconciliationFunctionName"]' outputs.json)
          aws lambda update-function-code \
            --function-name $FUNCTION_NAME \
            --zip-file fileb://artifacts/lambda-functions/reconciliation-engine.zip

      - name: Deploy API Backend Lambda
        run: |
          FUNCTION_NAME=$(jq -r '.["AdvisoryETLStack"]["APIBackendFunctionName"]' outputs.json)
          aws lambda update-function-code \
            --function-name $FUNCTION_NAME \
            --zip-file fileb://artifacts/ui-application/backend/api-backend.zip

  # Job 5: Deploy Glue jobs
  deploy-glue:
    name: Deploy Glue Jobs
    runs-on: ubuntu-latest
    needs: [test-and-validate, deploy-infrastructure]
    if: github.event_name != 'pull_request'
    environment: ${{ needs.test-and-validate.outputs.environment }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Download CDK outputs
        uses: actions/download-artifact@v3
        with:
          name: cdk-outputs-${{ needs.test-and-validate.outputs.environment }}
          path: ./

      - name: Upload Glue job scripts to S3
        run: |
          BUCKET_NAME=$(jq -r '.["AdvisoryETLStack"]["GlueScriptsBucket"]' outputs.json)
          aws s3 cp glue-jobs/advisory_performance_etl.py s3://$BUCKET_NAME/scripts/
          
      - name: Update Glue job
        run: |
          JOB_NAME=$(jq -r '.["AdvisoryETLStack"]["GlueJobName"]' outputs.json)
          BUCKET_NAME=$(jq -r '.["AdvisoryETLStack"]["GlueScriptsBucket"]' outputs.json)
          
          aws glue update-job \
            --job-name $JOB_NAME \
            --job-update '{
              "Command": {
                "ScriptLocation": "s3://'$BUCKET_NAME'/scripts/advisory_performance_etl.py"
              }
            }'

  # Job 6: Deploy frontend
  deploy-frontend:
    name: Deploy Frontend
    runs-on: ubuntu-latest
    needs: [test-and-validate, deploy-infrastructure]
    if: github.event_name != 'pull_request'
    environment: ${{ needs.test-and-validate.outputs.environment }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          path: ./artifacts/

      - name: Download CDK outputs
        uses: actions/download-artifact@v3
        with:
          name: cdk-outputs-${{ needs.test-and-validate.outputs.environment }}
          path: ./

      - name: Deploy to S3
        run: |
          BUCKET_NAME=$(jq -r '.["AdvisoryETLStack"]["FrontendBucket"]' outputs.json)
          aws s3 sync artifacts/ui-application/frontend/build/ s3://$BUCKET_NAME --delete

      - name: Invalidate CloudFront
        run: |
          DISTRIBUTION_ID=$(jq -r '.["AdvisoryETLStack"]["CloudFrontDistributionId"]' outputs.json)
          aws cloudfront create-invalidation \
            --distribution-id $DISTRIBUTION_ID \
            --paths "/*"

  # Job 7: Setup database (only for new deployments)
  setup-database:
    name: Setup Database
    runs-on: ubuntu-latest
    needs: [test-and-validate, deploy-infrastructure]
    if: github.event_name != 'pull_request' && contains(github.event.head_commit.message, '[setup-db]')
    environment: ${{ needs.test-and-validate.outputs.environment }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          pip install psycopg2-binary boto3

      - name: Download CDK outputs
        uses: actions/download-artifact@v3
        with:
          name: cdk-outputs-${{ needs.test-and-validate.outputs.environment }}
          path: ./

      - name: Setup database schema
        run: |
          export DB_HOST=$(jq -r '.["AdvisoryETLStack"]["DatabaseHost"]' outputs.json)
          export DB_NAME=$(jq -r '.["AdvisoryETLStack"]["DatabaseName"]' outputs.json)
          export SECRET_ARN=$(jq -r '.["AdvisoryETLStack"]["DatabaseSecretArn"]' outputs.json)
          python scripts/setup_database.py

  # Job 8: Run integration tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [deploy-lambda, deploy-glue, deploy-frontend]
    if: github.event_name != 'pull_request'
    environment: ${{ needs.test-and-validate.outputs.environment }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install test dependencies
        run: |
          pip install -r requirements.txt
          pip install pytest boto3 requests

      - name: Download CDK outputs
        uses: actions/download-artifact@v3
        with:
          name: cdk-outputs-${{ needs.test-and-validate.outputs.environment }}
          path: ./

      - name: Run integration tests
        run: |
          export API_ENDPOINT=$(jq -r '.["AdvisoryETLStack"]["APIEndpoint"]' outputs.json)
          export FRONTEND_URL=$(jq -r '.["AdvisoryETLStack"]["FrontendURL"]' outputs.json)
          python -m pytest tests/integration/ -v

      - name: Test sample data upload
        run: |
          export S3_BUCKET=$(jq -r '.["AdvisoryETLStack"]["RawDataBucket"]' outputs.json)
          python scripts/generate_sample_data.py --upload-to-s3 --bucket $S3_BUCKET

  # Job 9: Post-deployment notifications
  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [integration-tests]
    if: always() && github.event_name != 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download CDK outputs
        uses: actions/download-artifact@v3
        with:
          name: cdk-outputs-${{ needs.test-and-validate.outputs.environment }}
          path: ./
        continue-on-error: true

      - name: Send success notification
        if: needs.integration-tests.result == 'success'
        run: |
          echo "🎉 Deployment successful!"
          if [ -f outputs.json ]; then
            echo "Frontend URL: $(jq -r '.["AdvisoryETLStack"]["FrontendURL"]' outputs.json)"
            echo "API Endpoint: $(jq -r '.["AdvisoryETLStack"]["APIEndpoint"]' outputs.json)"
          fi

      - name: Send failure notification
        if: needs.integration-tests.result == 'failure'
        run: |
          echo "❌ Deployment failed! Check the logs for details."

      - name: Post to Slack (if configured)
        if: env.SLACK_WEBHOOK_URL != ''
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          if [ "${{ needs.integration-tests.result }}" == "success" ]; then
            MESSAGE="✅ AWS ETL Pipeline deployment successful to ${{ needs.test-and-validate.outputs.environment }}"
          else
            MESSAGE="❌ AWS ETL Pipeline deployment failed to ${{ needs.test-and-validate.outputs.environment }}"
          fi
          
          curl -X POST -H 'Content-type: application/json' \
            --data "{\"text\":\"$MESSAGE\"}" \
            $SLACK_WEBHOOK_URL
