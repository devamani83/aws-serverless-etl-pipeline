name: Code Quality

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.9'
  NODE_VERSION: '18'

jobs:
  python-quality:
    name: Python Code Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install black flake8 isort mypy pylint pytest-cov bandit

      - name: Code formatting check (Black)
        run: |
          black --check --diff .

      - name: Import sorting check (isort)
        run: |
          isort --check-only --diff .

      - name: Linting (Flake8)
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

      - name: Type checking (MyPy)
        run: |
          mypy --install-types --non-interactive . || true

      - name: Advanced linting (Pylint)
        run: |
          pylint --fail-under=7.0 glue-jobs/ lambda-functions/ scripts/ || true

      - name: Security linting (Bandit)
        run: |
          bandit -r . -ll || true

      - name: Run tests with coverage
        run: |
          python -m pytest tests/ -v --cov=. --cov-report=xml --cov-report=html

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: python
          name: python-coverage

      - name: Upload coverage reports
        uses: actions/upload-artifact@v3
        with:
          name: python-coverage-report
          path: htmlcov/
          retention-days: 7

  javascript-quality:
    name: JavaScript/React Code Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ui-application/frontend/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('ui-application/frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: |
          cd ui-application/frontend
          npm ci

      - name: Linting (ESLint)
        run: |
          cd ui-application/frontend
          npm run lint

      - name: Code formatting check (Prettier)
        run: |
          cd ui-application/frontend
          npm run format:check

      - name: Type checking (TypeScript)
        run: |
          cd ui-application/frontend
          npm run type-check || true

      - name: Run tests
        run: |
          cd ui-application/frontend
          npm test -- --coverage --watchAll=false

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./ui-application/frontend/coverage/lcov.info
          flags: javascript
          name: javascript-coverage

  infrastructure-quality:
    name: Infrastructure Code Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install CDK
        run: |
          npm install -g aws-cdk

      - name: Install Python dependencies
        run: |
          pip install -r requirements.txt

      - name: Validate CDK code
        run: |
          cd infrastructure
          cdk synth --no-staging

      - name: CDK security scan
        run: |
          cd infrastructure
          npm install cdk-nag
          # Add cdk-nag to your app.py for security checks

      - name: Infrastructure linting (cfn-lint)
        run: |
          pip install cfn-lint
          cd infrastructure
          cdk synth --no-staging
          find cdk.out -name "*.json" -exec cfn-lint {} \;

  documentation-quality:
    name: Documentation Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install documentation tools
        run: |
          pip install markdownlint-cli2 doc8

      - name: Markdown linting
        run: |
          npx markdownlint-cli2 "**/*.md" || true

      - name: Check for broken links
        uses: gaurav-nelson/github-action-markdown-link-check@v1
        with:
          use-quiet-mode: 'yes'
          use-verbose-mode: 'yes'
          config-file: '.github/markdown-link-check-config.json'

      - name: Spell check
        uses: streetsidesoftware/cspell-action@v2
        with:
          files: "**/*.md"
          config: ".cspell.json"

  dependency-check:
    name: Dependency Vulnerability Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Python dependencies
        run: |
          pip install -r requirements.txt
          pip install safety

      - name: Python security check
        run: |
          safety check --json --output safety-report.json || true
          safety check

      - name: Install Node.js dependencies
        run: |
          cd ui-application/frontend
          npm ci

      - name: Node.js security audit
        run: |
          cd ui-application/frontend
          npm audit --audit-level moderate

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            safety-report.json
          retention-days: 7

  code-metrics:
    name: Code Metrics
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install analysis tools
        run: |
          pip install radon xenon

      - name: Calculate complexity metrics
        run: |
          echo "## Code Complexity Report" > complexity-report.md
          echo "" >> complexity-report.md
          
          echo "### Cyclomatic Complexity" >> complexity-report.md
          radon cc . -a -s >> complexity-report.md
          
          echo "" >> complexity-report.md
          echo "### Maintainability Index" >> complexity-report.md
          radon mi . -s >> complexity-report.md
          
          echo "" >> complexity-report.md
          echo "### Halstead Metrics" >> complexity-report.md
          radon hal . >> complexity-report.md

      - name: Check complexity thresholds
        run: |
          # Fail if average complexity is too high
          xenon --max-average A --max-modules B --max-absolute B . || true

      - name: Count lines of code
        run: |
          echo "## Lines of Code Report" > loc-report.md
          echo "" >> loc-report.md
          
          # Python files
          find . -name "*.py" -not -path "./.git/*" -not -path "./venv/*" | xargs wc -l | tail -1 >> loc-report.md
          
          # JavaScript files
          find . -name "*.js" -o -name "*.jsx" -not -path "./.git/*" -not -path "./node_modules/*" | xargs wc -l | tail -1 >> loc-report.md

      - name: Upload metrics reports
        uses: actions/upload-artifact@v3
        with:
          name: code-metrics
          path: |
            complexity-report.md
            loc-report.md
          retention-days: 7

  sonarcloud-analysis:
    name: SonarCloud Analysis
    runs-on: ubuntu-latest
    if: github.repository_owner == 'devamani83'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies and run tests
        run: |
          pip install -r requirements.txt
          pip install pytest pytest-cov
          python -m pytest tests/ --cov=. --cov-report=xml

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=devamani83_aws-serverless-etl-pipeline
            -Dsonar.organization=devamani83
            -Dsonar.python.coverage.reportPaths=coverage.xml
            -Dsonar.sources=.
            -Dsonar.exclusions=**/*test*/**,**/node_modules/**,**/venv/**
